
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: hospital_db
    environment:
      POSTGRES_DB: ${DB_NAME:-hospital_schedule}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-@Justin2020}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hospital_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-hospital_schedule}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hospital_backend
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hospital_schedule}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-@Justin2020}
      JWT_SECRET: ${JWT_SECRET:-hDk7S9mLpQ2xR5vT8nY3zX6cB1aE4gF0jW3pL7dK9sM}
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - hospital_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hospital_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - hospital_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  hospital_network:
    driver: bridge
